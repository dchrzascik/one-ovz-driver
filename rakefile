require 'rake'
require 'rake/testtask'
require 'fileutils'
load './config'

task :default => :unit_tests

task :unit_tests => :init_test
task :integration_tests => :init_test
task :test_all => [:unit_tests, :integration_tests]

# constants
TEST_DIR = 'test'
UNIT_TEST_DIR = TEST_DIR + '/unit'
INTEGRATION_TEST_DIR = TEST_DIR + '/integration'

def test(t, files)
  t.verbose = true
  t.warning = true
  t.test_files = FileList.new(files)
  t.libs = %W(lib src/var/remotes/vmm/ovz test/util src/var/remotes/im/ovz.d)
end

# Ensure that env is correctly set up => there is appropriate ct image
task :init_test do
  disk = 'test/resources/disk.0'
  next if File.exists? disk
  p 'Downloading slackware-10.2-i386-minimal.tar.gz since template cache is needed for testing'
  sh "wget -O #{disk} http://download.openvz.org/template/precreated/contrib/slackware-10.2-i386-minimal.tar.gz"
end

task :unit_tests do
  Rake::TestTask.new(:unit_tests) do |t|
    puts "Running unit tests"
    test(t, UNIT_TEST_DIR + "/**/*_test.rb")
  end
end

task :integration_tests do
  Rake::TestTask.new(:integration_tests) do |t|
    puts "Running integration tests"
    test(t, INTEGRATION_TEST_DIR + "/**/*_test.rb")
  end
end

# Copy whole project to remote directory @ ovz host
# task may be used when nfs isn't set up
task :copy, :dst do |t, args|
  dst = args[:dst] ? args[:dst] : REMOTE_DIR
  sh "rsync -r --exclude '.git' \`pwd\`\/ #{DOMAIN}:#{dst}"
end

# Synchronise and run all tests remotly on openvz cluster node
# REMOTE_DIR is used as a default dir
task :remote_test do
  sh "rsync --verbose --progress --compress --rsh=/usr/bin/ssh " +
         "--recursive --times --perms --links --delete " +
         "--exclude \".git\" --exclude \".idea\" * #{DOMAIN}:#{REMOTE_DIR}"
  sh "ssh #{DOMAIN} \"cd #{REMOTE_DIR} && sudo rake test_all\""
end

# Install required gems
task :gems do
  %w(openvz flexmock systemu xml-mapping).each do |dependency|
    sh "gem install #{dependency}"
  end
end

task :doc do
  sh "rdoc -x _test.rb"
end

# Copies driver files to OpenNebula directories
task :install do
  dirs = {}
  # get dirs to which files have to be copied
  if !ENV['ONE_LOCATION']
    puts "Installing system wide"
    dirs = {'var' => '/var/lib/one', 'etc' => '/etc/one', 'share' => '/usr/share/one'}
  else
    puts "Installing self-contained"
    %w(var etc share).each { |x| dirs[x] = File.join(ENV['ONE_LOCATION'], x) }
  end

  # copy project files to their corresponding ONE dirs
  dirs.each_pair do |key, dir|
    sh "mkdir -p #{dir}"
    files = Dir.glob("src/#{key}/*")
    FileUtils.cp_r files, dir
    puts "files from #{files} were copied to directory: #{dir}"
  end
end

